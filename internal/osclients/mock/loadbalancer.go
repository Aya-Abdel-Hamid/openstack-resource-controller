/*
Copyright 2024 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ../loadbalancer.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=loadbalancer.go -source=../loadbalancer.go github.com/k-orc/openstack-resource-controller/internal/osclients/mock LbClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apiversions "github.com/gophercloud/gophercloud/v2/openstack/loadbalancer/v2/apiversions"
	flavors "github.com/gophercloud/gophercloud/v2/openstack/loadbalancer/v2/flavors"
	listeners "github.com/gophercloud/gophercloud/v2/openstack/loadbalancer/v2/listeners"
	loadbalancers "github.com/gophercloud/gophercloud/v2/openstack/loadbalancer/v2/loadbalancers"
	monitors "github.com/gophercloud/gophercloud/v2/openstack/loadbalancer/v2/monitors"
	pools "github.com/gophercloud/gophercloud/v2/openstack/loadbalancer/v2/pools"
	providers "github.com/gophercloud/gophercloud/v2/openstack/loadbalancer/v2/providers"
	gomock "go.uber.org/mock/gomock"
)

// MockLbClient is a mock of LbClient interface.
type MockLbClient struct {
	ctrl     *gomock.Controller
	recorder *MockLbClientMockRecorder
	isgomock struct{}
}

// MockLbClientMockRecorder is the mock recorder for MockLbClient.
type MockLbClientMockRecorder struct {
	mock *MockLbClient
}

// NewMockLbClient creates a new mock instance.
func NewMockLbClient(ctrl *gomock.Controller) *MockLbClient {
	mock := &MockLbClient{ctrl: ctrl}
	mock.recorder = &MockLbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLbClient) EXPECT() *MockLbClientMockRecorder {
	return m.recorder
}

// CreateListener mocks base method.
func (m *MockLbClient) CreateListener(ctx context.Context, opts listeners.CreateOptsBuilder) (*listeners.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListener", ctx, opts)
	ret0, _ := ret[0].(*listeners.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListener indicates an expected call of CreateListener.
func (mr *MockLbClientMockRecorder) CreateListener(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListener", reflect.TypeOf((*MockLbClient)(nil).CreateListener), ctx, opts)
}

// CreateLoadBalancer mocks base method.
func (m *MockLbClient) CreateLoadBalancer(ctx context.Context, opts loadbalancers.CreateOptsBuilder) (*loadbalancers.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", ctx, opts)
	ret0, _ := ret[0].(*loadbalancers.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockLbClientMockRecorder) CreateLoadBalancer(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockLbClient)(nil).CreateLoadBalancer), ctx, opts)
}

// CreateMonitor mocks base method.
func (m *MockLbClient) CreateMonitor(ctx context.Context, opts monitors.CreateOptsBuilder) (*monitors.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonitor", ctx, opts)
	ret0, _ := ret[0].(*monitors.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMonitor indicates an expected call of CreateMonitor.
func (mr *MockLbClientMockRecorder) CreateMonitor(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonitor", reflect.TypeOf((*MockLbClient)(nil).CreateMonitor), ctx, opts)
}

// CreatePool mocks base method.
func (m *MockLbClient) CreatePool(ctx context.Context, opts pools.CreateOptsBuilder) (*pools.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", ctx, opts)
	ret0, _ := ret[0].(*pools.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockLbClientMockRecorder) CreatePool(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockLbClient)(nil).CreatePool), ctx, opts)
}

// CreatePoolMember mocks base method.
func (m *MockLbClient) CreatePoolMember(ctx context.Context, poolID string, opts pools.CreateMemberOptsBuilder) (*pools.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoolMember", ctx, poolID, opts)
	ret0, _ := ret[0].(*pools.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePoolMember indicates an expected call of CreatePoolMember.
func (mr *MockLbClientMockRecorder) CreatePoolMember(ctx, poolID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoolMember", reflect.TypeOf((*MockLbClient)(nil).CreatePoolMember), ctx, poolID, opts)
}

// DeleteListener mocks base method.
func (m *MockLbClient) DeleteListener(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListener", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteListener indicates an expected call of DeleteListener.
func (mr *MockLbClientMockRecorder) DeleteListener(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListener", reflect.TypeOf((*MockLbClient)(nil).DeleteListener), ctx, id)
}

// DeleteLoadBalancer mocks base method.
func (m *MockLbClient) DeleteLoadBalancer(ctx context.Context, id string, opts loadbalancers.DeleteOptsBuilder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", ctx, id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockLbClientMockRecorder) DeleteLoadBalancer(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockLbClient)(nil).DeleteLoadBalancer), ctx, id, opts)
}

// DeleteMonitor mocks base method.
func (m *MockLbClient) DeleteMonitor(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMonitor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMonitor indicates an expected call of DeleteMonitor.
func (mr *MockLbClientMockRecorder) DeleteMonitor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMonitor", reflect.TypeOf((*MockLbClient)(nil).DeleteMonitor), ctx, id)
}

// DeletePool mocks base method.
func (m *MockLbClient) DeletePool(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePool", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockLbClientMockRecorder) DeletePool(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockLbClient)(nil).DeletePool), ctx, id)
}

// DeletePoolMember mocks base method.
func (m *MockLbClient) DeletePoolMember(ctx context.Context, poolID, lbMemberID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoolMember", ctx, poolID, lbMemberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoolMember indicates an expected call of DeletePoolMember.
func (mr *MockLbClientMockRecorder) DeletePoolMember(ctx, poolID, lbMemberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoolMember", reflect.TypeOf((*MockLbClient)(nil).DeletePoolMember), ctx, poolID, lbMemberID)
}

// GetListener mocks base method.
func (m *MockLbClient) GetListener(ctx context.Context, id string) (*listeners.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListener", ctx, id)
	ret0, _ := ret[0].(*listeners.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListener indicates an expected call of GetListener.
func (mr *MockLbClientMockRecorder) GetListener(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListener", reflect.TypeOf((*MockLbClient)(nil).GetListener), ctx, id)
}

// GetLoadBalancer mocks base method.
func (m *MockLbClient) GetLoadBalancer(ctx context.Context, id string) (*loadbalancers.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", ctx, id)
	ret0, _ := ret[0].(*loadbalancers.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockLbClientMockRecorder) GetLoadBalancer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockLbClient)(nil).GetLoadBalancer), ctx, id)
}

// GetPool mocks base method.
func (m *MockLbClient) GetPool(ctx context.Context, id string) (*pools.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", ctx, id)
	ret0, _ := ret[0].(*pools.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPool indicates an expected call of GetPool.
func (mr *MockLbClientMockRecorder) GetPool(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*MockLbClient)(nil).GetPool), ctx, id)
}

// ListListeners mocks base method.
func (m *MockLbClient) ListListeners(ctx context.Context, opts listeners.ListOptsBuilder) ([]listeners.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListListeners", ctx, opts)
	ret0, _ := ret[0].([]listeners.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListListeners indicates an expected call of ListListeners.
func (mr *MockLbClientMockRecorder) ListListeners(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListListeners", reflect.TypeOf((*MockLbClient)(nil).ListListeners), ctx, opts)
}

// ListLoadBalancerFlavors mocks base method.
func (m *MockLbClient) ListLoadBalancerFlavors(ctx context.Context) ([]flavors.Flavor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancerFlavors", ctx)
	ret0, _ := ret[0].([]flavors.Flavor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerFlavors indicates an expected call of ListLoadBalancerFlavors.
func (mr *MockLbClientMockRecorder) ListLoadBalancerFlavors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerFlavors", reflect.TypeOf((*MockLbClient)(nil).ListLoadBalancerFlavors), ctx)
}

// ListLoadBalancerProviders mocks base method.
func (m *MockLbClient) ListLoadBalancerProviders(ctx context.Context) ([]providers.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancerProviders", ctx)
	ret0, _ := ret[0].([]providers.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancerProviders indicates an expected call of ListLoadBalancerProviders.
func (mr *MockLbClientMockRecorder) ListLoadBalancerProviders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancerProviders", reflect.TypeOf((*MockLbClient)(nil).ListLoadBalancerProviders), ctx)
}

// ListLoadBalancers mocks base method.
func (m *MockLbClient) ListLoadBalancers(ctx context.Context, opts loadbalancers.ListOptsBuilder) ([]loadbalancers.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancers", ctx, opts)
	ret0, _ := ret[0].([]loadbalancers.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers.
func (mr *MockLbClientMockRecorder) ListLoadBalancers(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockLbClient)(nil).ListLoadBalancers), ctx, opts)
}

// ListMonitors mocks base method.
func (m *MockLbClient) ListMonitors(ctx context.Context, opts monitors.ListOptsBuilder) ([]monitors.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMonitors", ctx, opts)
	ret0, _ := ret[0].([]monitors.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMonitors indicates an expected call of ListMonitors.
func (mr *MockLbClientMockRecorder) ListMonitors(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMonitors", reflect.TypeOf((*MockLbClient)(nil).ListMonitors), ctx, opts)
}

// ListOctaviaVersions mocks base method.
func (m *MockLbClient) ListOctaviaVersions(ctx context.Context) ([]apiversions.APIVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOctaviaVersions", ctx)
	ret0, _ := ret[0].([]apiversions.APIVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOctaviaVersions indicates an expected call of ListOctaviaVersions.
func (mr *MockLbClientMockRecorder) ListOctaviaVersions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOctaviaVersions", reflect.TypeOf((*MockLbClient)(nil).ListOctaviaVersions), ctx)
}

// ListPoolMember mocks base method.
func (m *MockLbClient) ListPoolMember(ctx context.Context, poolID string, opts pools.ListMembersOptsBuilder) ([]pools.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoolMember", ctx, poolID, opts)
	ret0, _ := ret[0].([]pools.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoolMember indicates an expected call of ListPoolMember.
func (mr *MockLbClientMockRecorder) ListPoolMember(ctx, poolID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoolMember", reflect.TypeOf((*MockLbClient)(nil).ListPoolMember), ctx, poolID, opts)
}

// ListPools mocks base method.
func (m *MockLbClient) ListPools(ctx context.Context, opts pools.ListOptsBuilder) ([]pools.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", ctx, opts)
	ret0, _ := ret[0].([]pools.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPools indicates an expected call of ListPools.
func (mr *MockLbClientMockRecorder) ListPools(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*MockLbClient)(nil).ListPools), ctx, opts)
}

// UpdateListener mocks base method.
func (m *MockLbClient) UpdateListener(ctx context.Context, id string, opts listeners.UpdateOpts) (*listeners.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListener", ctx, id, opts)
	ret0, _ := ret[0].(*listeners.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListener indicates an expected call of UpdateListener.
func (mr *MockLbClientMockRecorder) UpdateListener(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListener", reflect.TypeOf((*MockLbClient)(nil).UpdateListener), ctx, id, opts)
}
